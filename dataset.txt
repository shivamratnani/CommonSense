What is a file,A named location that stores data or information permanently. It usually has a primary and secondary name separated by a dot.


What is a class,A blueprint for which objects are created. It has methods and variables associated with the instance of the class


what is an object,An object is an instance of a class


what is a constructor,a method that can be used to create an object of a class. There are 2 types of constructors default and parameterized


what are the 4 basics principles of object oriented programming,encapsulation
abstraction
inheritance
polymorphism


what is inheritance,its when the properties of the parent class are passed on to the child class


what is polymorphism,This means many forms and it is the ability for a object to take on many forms. for examle an integer is polymorphic, its reltively generic but when the code is complied its exact type will be determined.


whats the diffence between class and instance variables,with instance variables the varaibles belong to that instnace or object and changes made to that variable what affect other instances. With class variables there is only one of those variables and they are shared amongst all of the instances


constructor vs method,a constructor is used to initialize some object and does not have a return type

a method is used to perform some operation and does have a return type


what is a singleton class,with a singleton class you are only allowed to create 1 object for that class, but it does give you to flexibility to create more objects if the situation changes.


how do you create an object,decalare instatiate declare
box box1; //where box is the class


what are the differnt type of access modifyers,• Visible to the overall package. No modifier needed.
• Private - Visible to class only.
• Public - Visible to the world.
• Protected - Visible to package and subclass.


which operator has the highest precedence in java,the post fix operator (), []


what is an array,an array is a fixed size container that holds inforamtion of the same type


what is the difference between equals() and ==,The equals() is a method and it matches the content of the strings whereas == is an operator and matches object or reference of the strings.


Is string class final?,yes


Difference between overloading and overriding?,Overloading is when two or more methods in the same class have the same method name but different parameters(i.e different method signatures).
Overriding is when two methods having the same method name and parameters (i.e., method signature) but one of the methods is in the parent class and the other is in the child class


What are multiple inheritances in Java?,Java supports multiple inheritances i.e the ability of a class to implement more than one interface. A class can implement multiple Interfaces but cannot extends multiple classes.


What is a stream?,A stream can be defined as the sequence of data. There is two type of streams.
InputStream: Used to read a data from a source.
OutPut Stream: Used to write a data into a destination.


what is a superclass,In object-oriented programming, a class from which other classes inherit code is called a superclass, and the class which inherits the code is called a subclass of that superclass.


what is a default constructor,A default constructor is a constructor which can be called with no arguments (either defined with an empty parameter list, or with default arguments provided for every parameter).


what is a conversion constructor,A conversion constructor is a single-parameter constructor that is declared without the function specifier explicit. The compiler uses conversion constructors to convert objects from the type of the first parameter to the type of the conversion constructor's class.


What is the difference between C and C++ ?,C++ supports the object-oriented programming paradigm while C is based on structured programming.


What is multiple inheritance? What are its advantages and disadvantages?,"Multiple inheritance is the process where a subclass can be derived from more than one super-class. Its advantage is that a class can inherit the functionality of more than one base class, but its disadvantage is that it can lead to a lot of confusion when two base classes implement a method with the same name."


what is object oriented programming,its a programming language where everything is revolving around objects and data. and you can then crete realtionships betwen differnet objects


what is encapsulation,bundling variables and methods into one unit like a class, so your bundling the data with the methods that operate on that data. With encapsulation data cant be aaccesed directly by outside parties but only through the public functions available in the class. esentailly attributes are kept private and you have public getter and setter functions available to manipulate those attributes. encapsualtion is what makes the concept of data hiding possible


What is the necessity & advantages of OOPS?,Troubleshooting
When working with object-oriented programming languages, you know exactly where to look. "Oh, the car object broke down? The problem must be in the Car class!" You don't have to muck through anything else. That's the beauty of encapsulation. Objects are self-contained, and each bit of functionality does its own thing while leaving the other bits alone. Also, this modality allows an IT team to work on multiple objects simultaneously while minimizing the chance that one person might duplicate someone else's functionality.

2. Reuse of code through inheritance
Suppose that in addition to your Car object, one colleague needs a RaceCar object, and another needs a Limousine object. Everyone builds their objects separately but discover commonalities between them. In fact, each object is really just a different kind of Car. This is where the inheritance technique saves time: Create one generic class (Car), and then define the subclasses (RaceCar and Limousine) that are to inherit the generic class's traits.

Riffing on this example, you now need just a few drivers, or functions, like "driveCar," driveRaceCar" and "DriveLimousine." RaceCarDrivers share some traits with LimousineDrivers, but other things, like RaceHelmets and BeverageSponsorships, are unique.

This is where object-oriented programming's sweet polymorphism comes into play. Because a single function can shape-shift to adapt to whichever class it's in, you could create one function in the parent Car class called "drive" — not "driveCar" or "driveRaceCar," but just "drive." This one function would work with the RaceCarDriver, LimousineDriver, etc. In fact, you could even have "raceCar.drive(myRaceCarDriver)" or "limo.drive(myChauffeur)."

4. Effective problem solving
A language like C has an amazing legacy in programming history, but writing softw


What Is An Instance?,an object that is a member of some class


C++ What Is A Constructor? A Destructor?,A constructors and destructors are methods defined in a class that are invoked automatically when an object is created or destroyed. They are used to initialize a newly allocated object and to cleanup behind an object about to be removed.


What Is Cin And Cout?,They are objects corresponding to a program's default input and output files.


contrast procedural and object oriented programming,Procedural programming is akin to making a recipe, everthing is step by step manipulation of data items.

Object oriented programing is combining your data and the methods that operate on that data into a single package. you hav objects that are defined by classes . its sort of like writing a play where the attributes are characters and you have to first define their personalities and then you can write the dialogue and as a result get the drama.


Explain The Scope Resolution Operator.?,With this always think ::
It can be used for about 4 different things
1. to access global variables when there is a local variable with the same name
2. to define a function outside of a class
3. to access a class's static variables
4. and can be used in the case of multiple inheritance where a variable name exists in two ancestor classes, the scope resolution operator can be used to distinguish


What Are The Differences Between A C++ Struct And C++ Class?,A struct and a class are almost exactly the same with the only difference being if you don't specify visibility (protected, public, private) in a struct things will be public whereas in a class things will be private


. How Many Ways Are There To Initialize An Int With A Constant?,2
int a = 2;
int a(2)


How Does Throwing And Catching Exceptions Differ From Using Setjmp And Longjmp?,


When Should You Use Multiple Inheritance?,never, its messy. only as a last resort


What Is A Virtual Destructor?,I think it deal with using delete. when you make a virtual base class destructor it will make all derived class destructors virtual as well


T/F constructors can be virtual,F


what is a "is a" relationship vs a "has a" relationship,a is a realationship "is a" class that is a specialization of another one. for example you could have a class named dog and animal. a dog is a animal just more specialized.

the "has a" relationship is when a class has a instance of another class. for example an employee has a salary.


what are templates,generic programming. they allow us to write code independent of types. we can do this by creating generic classes or functions using templates.


what is a base class,the parent class of a derived class


When Is A Template A Better Solution Than A Base Class?,when perhaps the types might become an issue


What Are The Access Privileges In C++ ? What Is The Default Access Level ?,The access privileges in C++ are private, public and protected. The default access level assigned to members of a class is private. Private members of a class are accessible only within the class and by friends of the class. Protected members are accessible by the class itself and it's sub-classes. Public members of a class can be accessed by anyone.


what does const mean,a objects value cant be changed


How Is Memory Allocated/deallocated In C ? How About C++ ?,Memory is allocated in C using malloc() and freed using free(). In C++ the new() operator is used to allocate memory to an object and the delete() operator is used to free the memory taken up by an object.


What Is Uml?,UML refers to Unified Modeling Language. It is a language used to model OO problem spaces and solutions.


What Is The Difference Between A Shallow Copy And A Deep Copy?,Because C++ does not know much about your class, the default copy constructor and default assignment operators it provides use a copying method known as a memberwise copy (also known as a shallow copy). This means that C++ copies each member of the class individually (using the assignment operator for overloaded operator=, and direct initialization for the copy constructor). When classes are simple (e.g. do not contain any dynamically allocated memory), this works very well.However, when designing classes that handle dynamically allocated memory, memberwise (shallow) copying can get us in a lot of trouble! This is because shallow copies of a pointer just copy the address of the pointer -- it does not allocate any memory or copy the contents being pointed to!

Deep copying

One answer to this problem is to do a deep copy on any non-null pointers being copied. A deep copy allocates memory for the copy and then copies the actual value, so that the copy lives in distinct memory from the source. This way, the copy and source are distinct and will not affect each other in any way. Doing deep copies requires that we write our own copy constructors and overloaded assignment operators.
What is a file,A named location that stores data or information permanently. It usually has a primary and secondary name separated by a dot.


What is a class,A blueprint for which objects are created. It has methods and variables associated with the instance of the class


what is an object,An object is an instance of a class


what is a constructor,a method that can be used to create an object of a class. There are 2 types of constructors default and parameterized


what are the 4 basics principles of object oriented programming,encapsulation
abstraction
inheritance
polymorphism


what is inheritance,its when the properties of the parent class are passed on to the child class


what is polymorphism,This means many forms and it is the ability for a object to take on many forms. for examle an integer is polymorphic, its reltively generic but when the code is complied its exact type will be determined.


whats the diffence between class and instance variables,with instance variables the varaibles belong to that instnace or object and changes made to that variable what affect other instances. With class variables there is only one of those variables and they are shared amongst all of the instances


constructor vs method,a constructor is used to initialize some object and does not have a return type

a method is used to perform some operation and does have a return type


what is a singleton class,with a singleton class you are only allowed to create 1 object for that class, but it does give you to flexibility to create more objects if the situation changes.


how do you create an object,decalare instatiate declare
box box1; //where box is the class


what are the differnt type of access modifyers,• Visible to the overall package. No modifier needed.
• Private - Visible to class only.
• Public - Visible to the world.
• Protected - Visible to package and subclass.


which operator has the highest precedence in java,the post fix operator (), []


what is an array,an array is a fixed size container that holds inforamtion of the same type


what is the difference between equals() and ==,The equals() is a method and it matches the content of the strings whereas == is an operator and matches object or reference of the strings.


Is string class final?,yes


Difference between overloading and overriding?,Overloading is when two or more methods in the same class have the same method name but different parameters(i.e different method signatures).
Overriding is when two methods having the same method name and parameters (i.e., method signature) but one of the methods is in the parent class and the other is in the child class


What are multiple inheritances in Java?,Java supports multiple inheritances i.e the ability of a class to implement more than one interface. A class can implement multiple Interfaces but cannot extends multiple classes.


What is a stream?,A stream can be defined as the sequence of data. There is two type of streams.
InputStream: Used to read a data from a source.
OutPut Stream: Used to write a data into a destination.


what is a superclass,In object-oriented programming, a class from which other classes inherit code is called a superclass, and the class which inherits the code is called a subclass of that superclass.


what is a default constructor,A default constructor is a constructor which can be called with no arguments (either defined with an empty parameter list, or with default arguments provided for every parameter).


what is a conversion constructor,A conversion constructor is a single-parameter constructor that is declared without the function specifier explicit. The compiler uses conversion constructors to convert objects from the type of the first parameter to the type of the conversion constructor's class.


What is the difference between C and C++ ?,C++ supports the object-oriented programming paradigm while C is based on structured programming.


What is multiple inheritance? What are its advantages and disadvantages?,"Multiple inheritance is the process where a subclass can be derived from more than one super-class. Its advantage is that a class can inherit the functionality of more than one base class, but its disadvantage is that it can lead to a lot of confusion when two base classes implement a method with the same name."


what is object oriented programming,its a programming language where everything is revolving around objects and data. and you can then crete realtionships betwen differnet objects


what is encapsulation,bundling variables and methods into one unit like a class, so your bundling the data with the methods that operate on that data. With encapsulation data cant be aaccesed directly by outside parties but only through the public functions available in the class. esentailly attributes are kept private and you have public getter and setter functions available to manipulate those attributes. encapsualtion is what makes the concept of data hiding possible


What is the necessity & advantages of OOPS?,Troubleshooting
When working with object-oriented programming languages, you know exactly where to look. "Oh, the car object broke down? The problem must be in the Car class!" You don't have to muck through anything else. That's the beauty of encapsulation. Objects are self-contained, and each bit of functionality does its own thing while leaving the other bits alone. Also, this modality allows an IT team to work on multiple objects simultaneously while minimizing the chance that one person might duplicate someone else's functionality.

2. Reuse of code through inheritance
Suppose that in addition to your Car object, one colleague needs a RaceCar object, and another needs a Limousine object. Everyone builds their objects separately but discover commonalities between them. In fact, each object is really just a different kind of Car. This is where the inheritance technique saves time: Create one generic class (Car), and then define the subclasses (RaceCar and Limousine) that are to inherit the generic class's traits.

Riffing on this example, you now need just a few drivers, or functions, like "driveCar," driveRaceCar" and "DriveLimousine." RaceCarDrivers share some traits with LimousineDrivers, but other things, like RaceHelmets and BeverageSponsorships, are unique.

This is where object-oriented programming's sweet polymorphism comes into play. Because a single function can shape-shift to adapt to whichever class it's in, you could create one function in the parent Car class called "drive" — not "driveCar" or "driveRaceCar," but just "drive." This one function would work with the RaceCarDriver, LimousineDriver, etc. In fact, you could even have "raceCar.drive(myRaceCarDriver)" or "limo.drive(myChauffeur)."

4. Effective problem solving
A language like C has an amazing legacy in programming history, but writing softw


What Is An Instance?,an object that is a member of some class


C++ What Is A Constructor? A Destructor?,A constructors and destructors are methods defined in a class that are invoked automatically when an object is created or destroyed. They are used to initialize a newly allocated object and to cleanup behind an object about to be removed.


What Is Cin And Cout?,They are objects corresponding to a program's default input and output files.


contrast procedural and object oriented programming,Procedural programming is akin to making a recipe, everthing is step by step manipulation of data items.

Object oriented programing is combining your data and the methods that operate on that data into a single package. you hav objects that are defined by classes . its sort of like writing a play where the attributes are characters and you have to first define their personalities and then you can write the dialogue and as a result get the drama.


Explain The Scope Resolution Operator.?,With this always think ::
It can be used for about 4 different things
1. to access global variables when there is a local variable with the same name
2. to define a function outside of a class
3. to access a class's static variables
4. and can be used in the case of multiple inheritance where a variable name exists in two ancestor classes, the scope resolution operator can be used to distinguish


What Are The Differences Between A C++ Struct And C++ Class?,A struct and a class are almost exactly the same with the only difference being if you don't specify visibility (protected, public, private) in a struct things will be public whereas in a class things will be private


. How Many Ways Are There To Initialize An Int With A Constant?,2
int a = 2;
int a(2)


How Does Throwing And Catching Exceptions Differ From Using Setjmp And Longjmp?,


When Should You Use Multiple Inheritance?,never, its messy. only as a last resort


What Is A Virtual Destructor?,I think it deal with using delete. when you make a virtual base class destructor it will make all derived class destructors virtual as well


T/F constructors can be virtual,F


what is a "is a" relationship vs a "has a" relationship,a is a realationship "is a" class that is a specialization of another one. for example you could have a class named dog and animal. a dog is a animal just more specialized.

the "has a" relationship is when a class has a instance of another class. for example an employee has a salary.


what are templates,generic programming. they allow us to write code independent of types. we can do this by creating generic classes or functions using templates.


what is a base class,the parent class of a derived class


When Is A Template A Better Solution Than A Base Class?,when perhaps the types might become an issue


What Are The Access Privileges In C++ ? What Is The Default Access Level ?,The access privileges in C++ are private, public and protected. The default access level assigned to members of a class is private. Private members of a class are accessible only within the class and by friends of the class. Protected members are accessible by the class itself and it's sub-classes. Public members of a class can be accessed by anyone.


what does const mean,a objects value cant be changed


How Is Memory Allocated/deallocated In C ? How About C++ ?,Memory is allocated in C using malloc() and freed using free(). In C++ the new() operator is used to allocate memory to an object and the delete() operator is used to free the memory taken up by an object.


What Is Uml?,UML refers to Unified Modeling Language. It is a language used to model OO problem spaces and solutions.


What Is The Difference Between A Shallow Copy And A Deep Copy?,Because C++ does not know much about your class, the default copy constructor and default assignment operators it provides use a copying method known as a memberwise copy (also known as a shallow copy). This means that C++ copies each member of the class individually (using the assignment operator for overloaded operator=, and direct initialization for the copy constructor). When classes are simple (e.g. do not contain any dynamically allocated memory), this works very well.However, when designing classes that handle dynamically allocated memory, memberwise (shallow) copying can get us in a lot of trouble! This is because shallow copies of a pointer just copy the address of the pointer -- it does not allocate any memory or copy the contents being pointed to!

Deep copying

One answer to this problem is to do a deep copy on any non-null pointers being copied. A deep copy allocates memory for the copy and then copies the actual value, so that the copy lives in distinct memory from the source. This way, the copy and source are distinct and will not affect each other in any way. Doing deep copies requires that we write our own copy constructors and overloaded assignment operators.
What is a file,A named location that stores data or information permanently. It usually has a primary and secondary name separated by a dot.


What is a class,A blueprint for which objects are created. It has methods and variables associated with the instance of the class


what is an object,An object is an instance of a class


what is a constructor,a method that can be used to create an object of a class. There are 2 types of constructors default and parameterized


what are the 4 basics principles of object oriented programming,encapsulation
abstraction
inheritance
polymorphism


what is inheritance,its when the properties of the parent class are passed on to the child class


what is polymorphism,This means many forms and it is the ability for a object to take on many forms. for examle an integer is polymorphic, its reltively generic but when the code is complied its exact type will be determined.


whats the diffence between class and instance variables,with instance variables the varaibles belong to that instnace or object and changes made to that variable what affect other instances. With class variables there is only one of those variables and they are shared amongst all of the instances


constructor vs method,a constructor is used to initialize some object and does not have a return type

a method is used to perform some operation and does have a return type


what is a singleton class,with a singleton class you are only allowed to create 1 object for that class, but it does give you to flexibility to create more objects if the situation changes.


how do you create an object,decalare instatiate declare
box box1; //where box is the class


what are the differnt type of access modifyers,• Visible to the overall package. No modifier needed.
• Private - Visible to class only.
• Public - Visible to the world.
• Protected - Visible to package and subclass.


which operator has the highest precedence in java,the post fix operator (), []


what is an array,an array is a fixed size container that holds inforamtion of the same type


what is the difference between equals() and ==,The equals() is a method and it matches the content of the strings whereas == is an operator and matches object or reference of the strings.


Is string class final?,yes


Difference between overloading and overriding?,Overloading is when two or more methods in the same class have the same method name but different parameters(i.e different method signatures).
Overriding is when two methods having the same method name and parameters (i.e., method signature) but one of the methods is in the parent class and the other is in the child class


What are multiple inheritances in Java?,Java supports multiple inheritances i.e the ability of a class to implement more than one interface. A class can implement multiple Interfaces but cannot extends multiple classes.


What is a stream?,A stream can be defined as the sequence of data. There is two type of streams.
InputStream: Used to read a data from a source.
OutPut Stream: Used to write a data into a destination.


what is a superclass,In object-oriented programming, a class from which other classes inherit code is called a superclass, and the class which inherits the code is called a subclass of that superclass.


what is a default constructor,A default constructor is a constructor which can be called with no arguments (either defined with an empty parameter list, or with default arguments provided for every parameter).


what is a conversion constructor,A conversion constructor is a single-parameter constructor that is declared without the function specifier explicit. The compiler uses conversion constructors to convert objects from the type of the first parameter to the type of the conversion constructor's class.


What is the difference between C and C++ ?,C++ supports the object-oriented programming paradigm while C is based on structured programming.


What is multiple inheritance? What are its advantages and disadvantages?,"Multiple inheritance is the process where a subclass can be derived from more than one super-class. Its advantage is that a class can inherit the functionality of more than one base class, but its disadvantage is that it can lead to a lot of confusion when two base classes implement a method with the same name."


what is object oriented programming,its a programming language where everything is revolving around objects and data. and you can then crete realtionships betwen differnet objects


what is encapsulation,bundling variables and methods into one unit like a class, so your bundling the data with the methods that operate on that data. With encapsulation data cant be aaccesed directly by outside parties but only through the public functions available in the class. esentailly attributes are kept private and you have public getter and setter functions available to manipulate those attributes. encapsualtion is what makes the concept of data hiding possible


What is the necessity & advantages of OOPS?,Troubleshooting
When working with object-oriented programming languages, you know exactly where to look. "Oh, the car object broke down? The problem must be in the Car class!" You don't have to muck through anything else. That's the beauty of encapsulation. Objects are self-contained, and each bit of functionality does its own thing while leaving the other bits alone. Also, this modality allows an IT team to work on multiple objects simultaneously while minimizing the chance that one person might duplicate someone else's functionality.

2. Reuse of code through inheritance
Suppose that in addition to your Car object, one colleague needs a RaceCar object, and another needs a Limousine object. Everyone builds their objects separately but discover commonalities between them. In fact, each object is really just a different kind of Car. This is where the inheritance technique saves time: Create one generic class (Car), and then define the subclasses (RaceCar and Limousine) that are to inherit the generic class's traits.

Riffing on this example, you now need just a few drivers, or functions, like "driveCar," driveRaceCar" and "DriveLimousine." RaceCarDrivers share some traits with LimousineDrivers, but other things, like RaceHelmets and BeverageSponsorships, are unique.

This is where object-oriented programming's sweet polymorphism comes into play. Because a single function can shape-shift to adapt to whichever class it's in, you could create one function in the parent Car class called "drive" — not "driveCar" or "driveRaceCar," but just "drive." This one function would work with the RaceCarDriver, LimousineDriver, etc. In fact, you could even have "raceCar.drive(myRaceCarDriver)" or "limo.drive(myChauffeur)."

4. Effective problem solving
A language like C has an amazing legacy in programming history, but writing softw


What Is An Instance?,an object that is a member of some class


C++ What Is A Constructor? A Destructor?,A constructors and destructors are methods defined in a class that are invoked automatically when an object is created or destroyed. They are used to initialize a newly allocated object and to cleanup behind an object about to be removed.


What Is Cin And Cout?,They are objects corresponding to a program's default input and output files.


contrast procedural and object oriented programming,Procedural programming is akin to making a recipe, everthing is step by step manipulation of data items.

Object oriented programing is combining your data and the methods that operate on that data into a single package. you hav objects that are defined by classes . its sort of like writing a play where the attributes are characters and you have to first define their personalities and then you can write the dialogue and as a result get the drama.


Explain The Scope Resolution Operator.?,With this always think ::
It can be used for about 4 different things
1. to access global variables when there is a local variable with the same name
2. to define a function outside of a class
3. to access a class's static variables
4. and can be used in the case of multiple inheritance where a variable name exists in two ancestor classes, the scope resolution operator can be used to distinguish


What Are The Differences Between A C++ Struct And C++ Class?,A struct and a class are almost exactly the same with the only difference being if you don't specify visibility (protected, public, private) in a struct things will be public whereas in a class things will be private


. How Many Ways Are There To Initialize An Int With A Constant?,2
int a = 2;
int a(2)


How Does Throwing And Catching Exceptions Differ From Using Setjmp And Longjmp?,


When Should You Use Multiple Inheritance?,never, its messy. only as a last resort


What Is A Virtual Destructor?,I think it deal with using delete. when you make a virtual base class destructor it will make all derived class destructors virtual as well


T/F constructors can be virtual,F


what is a "is a" relationship vs a "has a" relationship,a is a realationship "is a" class that is a specialization of another one. for example you could have a class named dog and animal. a dog is a animal just more specialized.

the "has a" relationship is when a class has a instance of another class. for example an employee has a salary.


what are templates,generic programming. they allow us to write code independent of types. we can do this by creating generic classes or functions using templates.


what is a base class,the parent class of a derived class


When Is A Template A Better Solution Than A Base Class?,when perhaps the types might become an issue


What Are The Access Privileges In C++ ? What Is The Default Access Level ?,The access privileges in C++ are private, public and protected. The default access level assigned to members of a class is private. Private members of a class are accessible only within the class and by friends of the class. Protected members are accessible by the class itself and it's sub-classes. Public members of a class can be accessed by anyone.


what does const mean,a objects value cant be changed


How Is Memory Allocated/deallocated In C ? How About C++ ?,Memory is allocated in C using malloc() and freed using free(). In C++ the new() operator is used to allocate memory to an object and the delete() operator is used to free the memory taken up by an object.


What Is Uml?,UML refers to Unified Modeling Language. It is a language used to model OO problem spaces and solutions.


What Is The Difference Between A Shallow Copy And A Deep Copy?,Because C++ does not know much about your class, the default copy constructor and default assignment operators it provides use a copying method known as a memberwise copy (also known as a shallow copy). This means that C++ copies each member of the class individually (using the assignment operator for overloaded operator=, and direct initialization for the copy constructor). When classes are simple (e.g. do not contain any dynamically allocated memory), this works very well.However, when designing classes that handle dynamically allocated memory, memberwise (shallow) copying can get us in a lot of trouble! This is because shallow copies of a pointer just copy the address of the pointer -- it does not allocate any memory or copy the contents being pointed to!

Deep copying

One answer to this problem is to do a deep copy on any non-null pointers being copied. A deep copy allocates memory for the copy and then copies the actual value, so that the copy lives in distinct memory from the source. This way, the copy and source are distinct and will not affect each other in any way. Doing deep copies requires that we write our own copy constructors and overloaded assignment operators.
How do you determine the time complexity of an algorithm?,To determine the time complexity of an algorithm, you can analyze how the algorithm's running time increases as the input size grows. This can be done by counting the number of basic operations performed by the algorithm and determining how they scale with the input size.


Can you explain what Big O notation is and how it's used to describe the time complexity of an algorithm?,Big O notation is a way to describe how long an algorithm takes to run in the worst-case scenario. It's a measure of the algorithm's time complexity, and it describes how long the algorithm will take when the input size is at its largest. For example, an algorithm with a time complexity of O(n) will take longer to run as the input size increases, whereas an algorithm with a time complexity of O(1) will take the same amount of time to run regardless of the input size.


Can you give examples of common time complexities (e.g. O(1), O(n), O(n^2), etc.) and explain when you might use each one?,Some common time complexities are:
O(1) - Constant time. This means that the algorithm takes the same amount of time to run regardless of the input size.
O(log n) - Logarithmic time. This means that the algorithm's running time increases logarithmically with the input size.
O(n) - Linear time. This means that the algorithm's running time increases linearly with the input size.
O(n log n) - Linear logarithmic time. This means that the algorithm's running time increases with the input size and the logarithm of the input size.
O(n^2) - Quadratic time. This means that the algorithm's running time is proportional to the square of the input size.
O(n^3) - Cubic time. This means that the algorithm's running time is proportional to the cube of the input size.
O(2^n) - Exponential time. This means that the algorithm's running time increases exponentially with the input size.


Can you explain the difference between time complexity and space complexity, and give examples of each?,Time complexity is a measure of how long an algorithm takes to run, whereas space complexity is a measure of how much memory an algorithm uses. For example, an algorithm with a time complexity of O(n) might have a space complexity of O(1), meaning it uses a constant amount of memory regardless of the input size.


Can you analyze the time complexity of a given algorithm and provide a Big O notation for it?,To analyze the time complexity of a given algorithm, you can count the number of basic operations performed by the algorithm and determine how they scale with the input size. For example, if an algorithm performs a constant number of basic operations (e.g. O(1)), its time complexity is O(1). On the other hand, if an algorithm performs a number of basic operations that is proportional to the input size (e.g. O(n)), its time complexity is O(n).


Can you explain how to determine the time complexity of a recursive function?,To determine the time complexity of a recursive function, you can analyze the number of recursive calls made by the function and how they scale with the input size. For example, if a recursive function makes a constant number of recursive calls (e.g. O(1)), its time complexity is O(1). On the other hand, if a recursive function makes a number of recursive calls that is proportional to the input size (e.g. O(n)), its time complexity is O(n).


Can you discuss the trade-offs of using a more efficient algorithm with a higher space complexity versus a less efficient algorithm with a lower space complexity?,When deciding between using a more efficient algorithm with a higher space complexity versus a less efficient algorithm with a lower space complexity, you need to consider the specific requirements of the problem you're trying to solve. In some cases, it might be more important to minimize the running time of the algorithm, even if it means using more memory. In other cases, it might be more important to minimize the amount of memory used, even if it means the algorithm takes longer to run. It's important to carefully consider these trade-offs and choose the approach that best meets the needs of the problem.


Can you provide examples of algorithms that have a better time complexity when implemented in one programming language versus another?,The time complexity of an algorithm can vary depending on the programming language it's implemented in. For example, some algorithms might have a better time complexity when implemented in a compiled language like C++, while others might have a better time complexity when implemented in an interpreted language like Python. This can be due to differences in the way the languages are implemented and the specific features they offer.


Can you discuss common time complexity pitfalls (e.g. falling into the trap of O(n!) for a combinatorial problem)?,One common time complexity pitfall is falling into the trap of O(n!) for a combinatorial problem. This can happen when an algorithm generates all possible combinations of a set of items and checks each one, resulting in an exponential running time. To avoid this pitfall, it's important to think carefully about the problem and try to come up with an algorithm that generates only the combinations that are relevant to the problem, rather than generating all possible combinations.


Can you discuss how you would go about optimizing the time complexity of a given algorithm?,To optimize the time complexity of a given algorithm, you can try the following approaches:
Look for ways to reduce the number of basic operations performed by the algorithm. This might involve finding a more efficient way to solve the problem or using a more efficient data structure.
Look for ways to reduce the input size. This might involve preprocessing the input data or using a more efficient data structure to store the input.
Consider using an algorithm with a better time complexity, if one exists. This might involve trading off space complexity or other considerations for improved time complexity.


Can you explain the difference between a relational database and a NoSQL database?,A relational database is a type of database that stores data in a structured format using tables and relationships between them. A NoSQL database is a type of database that does not use a traditional SQL-based approach to storing data, and can support a wide variety of data models including key-value pairs, documents, and graphs.


How do you design a database schema for a new application?,When designing a database schema, I typically start by identifying the entities (e.g. users, orders, products) that need to be stored and the relationships between them. I then create a table for each entity, and define the columns in each table based on the data that needs to be stored. I also define any relationships between tables using foreign keys.


Can you describe a time when you had to optimize a database for performance?,I optimized a database for performance by identifying slow-running queries and indexing the appropriate columns to improve query performance. I also normalized the database schema to reduce redundancy and improve insert and update performance.


How do you handle database migrations when deploying new code?,To handle database migrations when deploying new code, I use a migration tool that can automatically apply and roll back changes to the database schema. This ensures that the database is always in a consistent state and allows me to easily revert any problematic changes.


Can you explain how transactions work in a database and give an example of when you might use them?,Transactions allow multiple database operations to be treated as a single unit of work, either committing all the changes or rolling them back if any errors occur. An example of when I might use transactions is when transferring funds between two bank accounts, where I would want to ensure that either both the debit and credit operations are completed, or neither of them are.


How do you choose a server-side language for a new project?,I choose a server-side language based on the requirements of the project, including the type of application, the performance needs, the available talent on the team, and any existing infrastructure.


Can you compare and contrast the syntax of two different server-side languages that you are familiar with?,For example, I might choose Java for a large-scale enterprise application that needs to be highly performant, or I might choose Python for a smaller web application where the focus is on rapid development and ease of use.


Can you explain the difference between compiled languages and interpreted languages?,


Can you describe a time when you had to debug an issue in a server-side language?,To debug an issue in a server-side language, I would use a debugger to step through the code, inspect variables, and set breakpoints to understand what is happening at each stage. I might also use log statements to print out debugging information or run unit tests to isolate the issue.


How do you handle errors and exceptions in a server-side language?,To handle errors and exceptions in a server-side language, I would use try-catch blocks to catch exceptions and take appropriate action. I might also define custom exceptions for specific error cases and throw them as needed.


Can you explain the difference between a web server and an application server?,A web server is a software program that listens for HTTP requests and sends back responses, while an application server is a more generic term that refers to a server-side program that serves business logic to clients.


How do you configure a web server for a new application?,To configure a web server for a new application, I would set up a virtual host for the application and configure the server to listen for requests on the appropriate domain and port. I would also set the document root to the directory containing the application's static assets and configure any necessary rewrite rules for URL routing.


Can you describe the process of serving static assets (e.g. images, stylesheets, JavaScript files) with a web server?,To serve static assets with a web server, I would set the appropriate file types (e.g. images, stylesheets, JavaScript files) to be served as static files and specify the directory containing the assets as the document root. The web server would then be able to serve these files directly in response to requests for them.


How do you handle load balancing and failover with a web server?,To handle load balancing and failover with a web server, I would use a load balancer to distribute incoming requests across multiple servers and configure the servers to be stateless so they can be easily swapped in and out. I would also set up monitoring to detect any failed servers and automatically failover to working servers


Can you explain how HTTPS works and how you have configured a web server to use HTTPS in the past?,HTTPS (Hypertext Transfer Protocol Secure) is a secure version of HTTP, the protocol used for transferring data on the web. HTTPS uses a secure SSL/TLS (Secure Sockets Layer/Transport Layer Security) connection to encrypt data sent between the web server and the client. This helps protect against eavesdropping and man-in-the-middle attacks, as the data cannot be easily intercepted or read by third parties.


Can you describe the principles of REST and how they apply to designing a RESTful API?,The principles of REST (Representational State Transfer) include the use of HTTP methods to indicate the desired action (e.g. GET, POST, PUT, DELETE), the use of HTTP status codes to indicate the result of the request, and the use of a uniform interface (e.g. using URLs to identify resources and using HTTP headers to provide additional context). When designing a RESTful API, I follow these principles to create a scalable and maintainable API that is easy to use and understand.


How do you design endpoints and request/response payloads for a RESTful API?,To design endpoints and request/response payloads for a RESTful API, I start by identifying the resources that the API will expose (e.g. users, orders, products) and the actions that can be performed on them (e.g. create, read, update, delete). I then define the endpoints for each resource and action, using HTTP methods and URLs to convey the desired action and resource. I also define the request and response payloads for each endpoint, using a data format such as JSON to structure the data.


Can you explain the difference between a GET request and a POST request in the context of a RESTful API?,A GET request is used to retrieve data from a server, while a POST request is used to send data to the server for processing. In the context of a RESTful API, a GET request might be used to retrieve a list of users, while a POST request might be used to create a new user.


How do you handle authentication and authorization in a RESTful API?,To handle authentication and authorization in a RESTful API, I might use tokens or cookies to identify the user making the request and verify that they have the necessary permissions to perform the requested action. I might also use encryption and hashing techniques to secure sensitive data.


Can you describe a time when you had to troubleshoot an issue with a RESTful API?,To troubleshoot an issue with a RESTful API, I would use a tool such as Postman to send test requests and examine the responses to understand what is happening at each stage. I might also use log statements or a debugger to understand the flow of the code and identify any issues.


How do you choose a server-side framework for a new project?,I choose a server-side framework based on the requirements of the project, including the type of application, the performance needs, the available talent on the team, and any existing infrastructure.


Can you compare and contrast the architecture and features of two different server-side frameworks that you are familiar with?,For example, I might choose Django for a web application that needs to support a large number of users and handle a lot of traffic, or I might choose Rails for a smaller web application where the focus is on rapid development and convention over configuration.


How do you implement routing, controllers, and models in a server-side framework?,To implement routing, controllers, and models in a server-side framework, I define the routes for the application and map them to controller actions that handle the request and return a response. The controller actions might then interact with models to retrieve or store data from the database.


Can you describe a time when you had to extend or customize a server-side framework for a project?,I extended or customized a server-side framework for a project by creating custom plugins or modules to add new functionality or override existing behavior. For example, I might create a custom authentication plugin to support a new type of authentication or a custom data model to support a new type of data.


How do you handle database interactions in a server-side framework?,To handle database interactions in a server-side framework, I use the framework's ORM (Object-Relational Mapping) layer to define data models and perform CRUD (create, read, update, delete) operations on the database. The ORM abstracts away the details of the database and allows me to work with the data using objects and methods rather than raw SQL queries.


Can you explain the difference between a distributed version control system and a centralized version control system?,A distributed version control system (DVCS) is a type of version control system where each user has a local copy of the entire repository, allowing them to work offline and commit changes to their local repository. A centralized version control system (CVCS) is a type of version control system where all users share a single central repository and must communicate with the repository to commit changes.


How do you use Git to manage changes in a codebase?,To use Git to manage changes in a codebase, I create a repository for the codebase and clone it to my local machine. I then make changes to the code and commit them to my local repository, using commit messages to describe the changes. When I am ready to share my changes, I push them to the remote repository.


Can you describe a time when you had to resolve a merge conflict in Git?,To resolve a merge conflict in Git, I first identify the conflicting files and use a text editor or tool such as GitMerge to manually resolve the conflicts by deciding which changes to keep and which to discard. I then commit the merged changes to my local repository and push them to the remote repository.


How do you use branching and merging in Git to manage different versions of code?,I use branching and merging in Git to manage different versions of code by creating branches for new features or bug fixes and merging them back into the main branch (usually called "master") when they are ready. This allows me to work on multiple changes concurrently without affecting the main codebase, and makes it easy to roll back changes if necessary.


Can you explain the role of a repository in a version control system and how you have used them in the past?,A repository in a version control system is a central location where code is stored and managed. It contains the history of all the changes to the code, and allows multiple users to collaborate on the code by committing changes and resolving conflicts. I have used repositories in the past to manage code for both personal projects and team projects, and have used features such as branching and tagging to organize and manage different versions of the code.


Can you explain the difference between authentication and authorization?,Authentication is the process of verifying the identity of a user or system, while authorization is the process of granting access to resources or actions based on the authenticated identity. For example, a user might authenticate using a username and password, and then be authorized to access certain resources or perform certain actions based on their role or permissions.


How do you implement password hashing and salting to secure user passwords?,To implement password hashing and salting, I would use a secure hashing function such as bcrypt to hash the user's password with a unique salt value. The salt is a random value that is generated for each password and added to the hashing function to make it more difficult for attackers to crack the hashed password. I would store the hashed password and salt in the database, and use the salt to hash the user's input when they log in to compare it to the stored hashed password.


Can you describe a time when you had to secure a web application against a common vulnerability (e.g. cross-site scripting, SQL injection)?,To secure a web application against a common vulnerability such as cross-site scripting (XSS) or SQL injection, I would follow best practices such as sanitizing user input to prevent injection attacks and using content security policies to prevent XSS attacks. I might also use tools such as scanners or firewalls to identify and mitigate vulnerabilities.


How do you handle sensitive data (e.g. passwords, credit card numbers) in a web application?,To handle sensitive data in a web application, I would ensure that it is encrypted in transit and at rest using secure protocols and algorithms. I might also use additional measures such as tokenization or masking to further protect the data.


Can you explain the difference between symmetric and asymmetric encryption and when you would use each?,Symmetric encryption is a type of encryption where the same key is used to encrypt and decrypt the data. It is fast and efficient, but requires that the key be shared securely between the sender and receiver. Asymmetric encryption is a type of encryption where a public key is used to encrypt the data and a private key is used to decrypt it. It is more secure, but slower and more resource-intensive. I would use symmetric encryption for large amounts of data that need to be transmitted quickly, and asymmetric encryption for smaller amounts of data or situations where the key cannot be shared securely.


Can you describe the factors that can affect the scalability of a web application?,The factors that can affect the scalability of a web application include the performance of the hardware and software, the design of the application, and the volume and complexity of the data being processed.


How do you design a web application to be horizontally scalable?,To design a web application to be horizontally scalable, I would use a distributed architecture where the application is divided into smaller, independent components that can be run on multiple servers. This allows the application to scale horizontally by adding more servers as needed to handle increased traffic. I might also use technologies such as load balancers and cache servers to improve the performance and scalability of the application.


Can you describe a time when you had to scale a web application to handle increased traffic?,I had to scale a web application to handle increased traffic by adding more servers and using a load balancer to distribute the traffic evenly across the servers. I also optimized the application's performance by identifying and addressing any bottlenecks or inefficiencies.


How do you monitor the performance of a web application and identify bottlenecks?,To monitor the performance of a web application and identify bottlenecks, I might use tools such as performance profilers, application performance management (APM) systems, or monitoring and logging tools to track key metrics such as response time, throughput, and error rates. I would also use these tools to identify any issues or trends that might affect the performance of the application.


Can you explain the difference between horizontal scaling and vertical scaling and when you would use each?,Horizontal scaling involves adding more servers to a system to increase capacity, while vertical scaling involves adding more resources (e.g. CPU, memory) to a single server to increase capacity. I would use horizontal scaling when the system is reaching the limits of a single server and needs to be distributed across multiple servers to handle more traffic. I would use vertical scaling when the system has spare capacity on a single server and needs to be optimized to handle more traffic.
What is a file,A named location that stores data or information permanently. It usually has a primary and secondary name separated by a dot.


What is a class,A blueprint for which objects are created. It has methods and variables associated with the instance of the class


what is an object,An object is an instance of a class


what is a constructor,a method that can be used to create an object of a class. There are 2 types of constructors default and parameterized


what are the 4 basics principles of object oriented programming,encapsulation
abstraction
inheritance
polymorphism


what is inheritance,its when the properties of the parent class are passed on to the child class


what is polymorphism,This means many forms and it is the ability for a object to take on many forms. for examle an integer is polymorphic, its reltively generic but when the code is complied its exact type will be determined.


whats the diffence between class and instance variables,with instance variables the varaibles belong to that instnace or object and changes made to that variable what affect other instances. With class variables there is only one of those variables and they are shared amongst all of the instances


constructor vs method,a constructor is used to initialize some object and does not have a return type

a method is used to perform some operation and does have a return type


what is a singleton class,with a singleton class you are only allowed to create 1 object for that class, but it does give you to flexibility to create more objects if the situation changes.


how do you create an object,decalare instatiate declare
box box1; //where box is the class


what are the differnt type of access modifyers,• Visible to the overall package. No modifier needed.
• Private - Visible to class only.
• Public - Visible to the world.
• Protected - Visible to package and subclass.


which operator has the highest precedence in java,the post fix operator (), []


what is an array,an array is a fixed size container that holds inforamtion of the same type


what is the difference between equals() and ==,The equals() is a method and it matches the content of the strings whereas == is an operator and matches object or reference of the strings.


Is string class final?,yes


Difference between overloading and overriding?,Overloading is when two or more methods in the same class have the same method name but different parameters(i.e different method signatures).
Overriding is when two methods having the same method name and parameters (i.e., method signature) but one of the methods is in the parent class and the other is in the child class


What are multiple inheritances in Java?,Java supports multiple inheritances i.e the ability of a class to implement more than one interface. A class can implement multiple Interfaces but cannot extends multiple classes.


What is a stream?,A stream can be defined as the sequence of data. There is two type of streams.
InputStream: Used to read a data from a source.
OutPut Stream: Used to write a data into a destination.


what is a superclass,In object-oriented programming, a class from which other classes inherit code is called a superclass, and the class which inherits the code is called a subclass of that superclass.


what is a default constructor,A default constructor is a constructor which can be called with no arguments (either defined with an empty parameter list, or with default arguments provided for every parameter).


what is a conversion constructor,A conversion constructor is a single-parameter constructor that is declared without the function specifier explicit. The compiler uses conversion constructors to convert objects from the type of the first parameter to the type of the conversion constructor's class.


What is the difference between C and C++ ?,C++ supports the object-oriented programming paradigm while C is based on structured programming.


What is multiple inheritance? What are its advantages and disadvantages?,"Multiple inheritance is the process where a subclass can be derived from more than one super-class. Its advantage is that a class can inherit the functionality of more than one base class, but its disadvantage is that it can lead to a lot of confusion when two base classes implement a method with the same name."


what is object oriented programming,its a programming language where everything is revolving around objects and data. and you can then crete realtionships betwen differnet objects


what is encapsulation,bundling variables and methods into one unit like a class, so your bundling the data with the methods that operate on that data. With encapsulation data cant be aaccesed directly by outside parties but only through the public functions available in the class. esentailly attributes are kept private and you have public getter and setter functions available to manipulate those attributes. encapsualtion is what makes the concept of data hiding possible


What is the necessity & advantages of OOPS?,Troubleshooting
When working with object-oriented programming languages, you know exactly where to look. "Oh, the car object broke down? The problem must be in the Car class!" You don't have to muck through anything else. That's the beauty of encapsulation. Objects are self-contained, and each bit of functionality does its own thing while leaving the other bits alone. Also, this modality allows an IT team to work on multiple objects simultaneously while minimizing the chance that one person might duplicate someone else's functionality.

2. Reuse of code through inheritance
Suppose that in addition to your Car object, one colleague needs a RaceCar object, and another needs a Limousine object. Everyone builds their objects separately but discover commonalities between them. In fact, each object is really just a different kind of Car. This is where the inheritance technique saves time: Create one generic class (Car), and then define the subclasses (RaceCar and Limousine) that are to inherit the generic class's traits.

Riffing on this example, you now need just a few drivers, or functions, like "driveCar," driveRaceCar" and "DriveLimousine." RaceCarDrivers share some traits with LimousineDrivers, but other things, like RaceHelmets and BeverageSponsorships, are unique.

This is where object-oriented programming's sweet polymorphism comes into play. Because a single function can shape-shift to adapt to whichever class it's in, you could create one function in the parent Car class called "drive" — not "driveCar" or "driveRaceCar," but just "drive." This one function would work with the RaceCarDriver, LimousineDriver, etc. In fact, you could even have "raceCar.drive(myRaceCarDriver)" or "limo.drive(myChauffeur)."

4. Effective problem solving
A language like C has an amazing legacy in programming history, but writing softw


What Is An Instance?,an object that is a member of some class


C++ What Is A Constructor? A Destructor?,A constructors and destructors are methods defined in a class that are invoked automatically when an object is created or destroyed. They are used to initialize a newly allocated object and to cleanup behind an object about to be removed.


What Is Cin And Cout?,They are objects corresponding to a program's default input and output files.


contrast procedural and object oriented programming,Procedural programming is akin to making a recipe, everthing is step by step manipulation of data items.

Object oriented programing is combining your data and the methods that operate on that data into a single package. you hav objects that are defined by classes . its sort of like writing a play where the attributes are characters and you have to first define their personalities and then you can write the dialogue and as a result get the drama.


Explain The Scope Resolution Operator.?,With this always think ::
It can be used for about 4 different things
1. to access global variables when there is a local variable with the same name
2. to define a function outside of a class
3. to access a class's static variables
4. and can be used in the case of multiple inheritance where a variable name exists in two ancestor classes, the scope resolution operator can be used to distinguish


What Are The Differences Between A C++ Struct And C++ Class?,A struct and a class are almost exactly the same with the only difference being if you don't specify visibility (protected, public, private) in a struct things will be public whereas in a class things will be private


. How Many Ways Are There To Initialize An Int With A Constant?,2
int a = 2;
int a(2)


How Does Throwing And Catching Exceptions Differ From Using Setjmp And Longjmp?,


When Should You Use Multiple Inheritance?,never, its messy. only as a last resort


What Is A Virtual Destructor?,I think it deal with using delete. when you make a virtual base class destructor it will make all derived class destructors virtual as well


T/F constructors can be virtual,F


what is a "is a" relationship vs a "has a" relationship,a is a realationship "is a" class that is a specialization of another one. for example you could have a class named dog and animal. a dog is a animal just more specialized.

the "has a" relationship is when a class has a instance of another class. for example an employee has a salary.


what are templates,generic programming. they allow us to write code independent of types. we can do this by creating generic classes or functions using templates.


what is a base class,the parent class of a derived class


When Is A Template A Better Solution Than A Base Class?,when perhaps the types might become an issue


What Are The Access Privileges In C++ ? What Is The Default Access Level ?,The access privileges in C++ are private, public and protected. The default access level assigned to members of a class is private. Private members of a class are accessible only within the class and by friends of the class. Protected members are accessible by the class itself and it's sub-classes. Public members of a class can be accessed by anyone.


what does const mean,a objects value cant be changed


How Is Memory Allocated/deallocated In C ? How About C++ ?,Memory is allocated in C using malloc() and freed using free(). In C++ the new() operator is used to allocate memory to an object and the delete() operator is used to free the memory taken up by an object.


What Is Uml?,UML refers to Unified Modeling Language. It is a language used to model OO problem spaces and solutions.


What Is The Difference Between A Shallow Copy And A Deep Copy?,Because C++ does not know much about your class, the default copy constructor and default assignment operators it provides use a copying method known as a memberwise copy (also known as a shallow copy). This means that C++ copies each member of the class individually (using the assignment operator for overloaded operator=, and direct initialization for the copy constructor). When classes are simple (e.g. do not contain any dynamically allocated memory), this works very well.However, when designing classes that handle dynamically allocated memory, memberwise (shallow) copying can get us in a lot of trouble! This is because shallow copies of a pointer just copy the address of the pointer -- it does not allocate any memory or copy the contents being pointed to!

Deep copying

One answer to this problem is to do a deep copy on any non-null pointers being copied. A deep copy allocates memory for the copy and then copies the actual value, so that the copy lives in distinct memory from the source. This way, the copy and source are distinct and will not affect each other in any way. Doing deep copies requires that we write our own copy constructors and overloaded assignment operators.
Explain the computer system.,A collection of hardware and software that makes up a computer - consists of processor, memory, storage devices, input/output devices, and other components


What is a processor (or CPU),Determines the meaning of information loaded into the computer


What is the memory?,computer's temporary storage areas


What is a storage device,internal/external computer object that stores data and programs like a flash or hardrive


What is an input/output device?,Used to connect the computer to external devices such as printers, keyboards, and mice


What is a file?,A file is a collection of data that is stored on a computer or other device. Files can be text, images, sounds or any combination of these.


What is inheritance?,Inheritance is a way of structuring code so that it can be shared between different classes. Represents an is-a relationship. A parent or superclass class could be bird and the child/subclass could be parrot


What is a chipset?,A chipset is a collection of circuit boards and other components that are used to connect a computer to the rest of the world. Chipsets are typically used to connect computers to the internet, printers, scanners, and other peripherals.


What is an operating system,A collection of software that runs on a computer and provides the basic functions of storing and managing information, such as memory, storage devices, and network access. Operating system controls how the computer works and how it interacts with other software and hardware. Operating systems can also provide security, communication and user interface, Ex: MacOS, Windows OS, Linux OS


How many popular operating systems are in use today,The most popular operating systems today are Windows, Mac OS and Linux. Windows is the most popular because it is the oldest and so many people are already familiar with it. MacOS is easy to use and has a lot of features. Linux is free and open source.


What is a microprocessor?,A microprocessor is a computerized device that is small enough to fit in a computer's memory. Microprocessors are used in many different kinds of devices like computers, cell phones, and industrial robots.


What is a class variable?,A variable that is defined in a class and shared by all instances of the class. Class variables can be used to store information about an object, such as its name, its location in memory, and its state at any given time. Class variables are often used to store info that is shared by objects in the same class.


What is a software development life cycle (SLDC)?,A process used to plan and manage development of software. The SDLC is a set of activities that are performed over a period of time to ensure that the software is developed in a way that is efficient and effective. The SDLC can be divided into three phases: Planning, design, and implementation.


Explain the planning phase of SDLC?,The organization identifies the goals and objectives that need to be achieved.


Explain the design phase of SDLC?,The organization identifies the requirements for the software that will be developed.


Explain the implementation phased of SDLC,The organization prepares the software for production and tests it to ensure that it meets all of its requirements. Finally it is deployed


What is a programming language,A computer language designed to facilitate the creation of software. It is a set of rules and guidelines that govern the structure and format of computer programs. A programming language is typically a high-level language that abstracts away from the complexities of programming in order to make it easier for programmers to understand: High level languages: C++,Java, and python. Low-level language examples are: MARS MIPS Assembler, Fortran, and MARIE.
Bubble Sort Method,Compare every adjacent element and if the first is less than the second - swap it. Guarantees that after the first pass the element at the end is the largest.

Two loops, comparison -> swap


Bubble Sort Run Time,O(n^2)

Outlook: Not a very good sorting algorithm. Useful for when two elements are close to their true position. Simple to write.


Insertion Sort Method,For each element, compare all prior elements and insert the element where it belongs

Two loops for, outside one counts up, inside one counts backwards


Insertion Sort Run Time,O(n^2)

Outlook: One of the better O(n^2) sorting algorithms. Simple to write


Merge Sort Method,Split array over and over until you have just one element. Compare the element and put them in a new array. When spit pieces are greater than 1, you compare positions in the list when putting them in the new Array.

Defined Recursively
mergeSort(left)
mergeSort(right)
merge(left, rigth)


Merge Sort Run Time,nlog(n)

Divide and Conquer

Outlook: Stable Sort, better than O(n^2) but not as good as quick sort or heap sort (auxiliary space). Merge sort or a tuned quick sort is the default sort for many languages (Arrays.sort(a))


Quick Sort,Assign an element called the pivot. Put all elements that less than the pivot to the left and all elements that are greater to the right (note: we don't care about the order these get put in yet - we just care about less than to the left and greater than to the right). This guarantees that the pivot is in the correct spot. Recursively repeat for the left side of the pivot and then the right side of the pivot


Heap Sort,Use a heap, swap the root element with it's last child. Now the heap is out of order, swap the root with its max child until the heap is once again in order. Repeat until the heap is properly in order


Heap Sort Run Time,nlogn

Divide and conquer

Although typically not as good as quick sort, it has the advantage of not having Quick sort's O(n^2) worse case scenario


Quick Sort Run Time,nlog(n) but at worse case it is n^2

Divide and Conquer

One of the best sorting algorithms, it is not a stable sort.

Partitions take O(n) operations and then another operation must be done on a split array which all sum up to logn


Greedy Algorithms,Algorithm that looks for the most optimal choice locally.

Pros: Easy to implement, quick, correct

Cons: The algorithm is usually not very good, it will give you an answer but not necessarily the most optimal one. Note, however, that often much more steps are required to find an optimal solution


Time Slot Scheduling,Could use a greedy algorithm but this is inefficient

Use Dynamic Programming
hint: subproblem - given an ordered listing of potential time slots what previous time slots that don't overlap will maximize our profit ?


Dynamic Programming,A method for solving certain types of problems, involve storing solutions to previous answered problems to find the solution to the current ones. There are two characteristics of dynamic programming problems

1. Optimal Substructure Problem: optimal solution constructed from subproblems
- longest common subsequence
- any problem that can be solved with dynamic programming

2. Overlapping Subproblems: able to break the problem down into subproblems that are reused to solve the answer
- fibonacci sequence


Max Subarray Problem,hint: what is the maximum sum from the previous n-1, is it greater than the nth sum?


Coin Change Problem,Dynamic Programming Problem, hint: a coin can either be used or not used to make the sum. Consider the scenarios for using it and not using it

solution[i][j]
= 0 if i=0
= 1 if j=0
= solution[i — 1][j] + solution[i][j — v[i — 1]] if(coin[i]<=j)
= solution[i — 1][j]; if(coin[i]>j)


Longest Subsequence,


Fibonacci,f(0) = 0
f(1) = 1
f(n) = f(n - 1) + f(n - 2)

or can be done better with dynamic programming


Bunny Hops,How many ways can a bunny jump up an n number of steps if the bunny can hop 1, 2 or 3 steps at a time?


Arrays,


Array Lists,


Linked Lists,Node{
 Node next
 int data
}

Linked list is a chain of these


Trees,Implement a node with access to a list of children and the parent node


In Order Traversal,inOrder(Node n)
 if(n != null)
 print(inOrder(n.left))
 print(n)
 print(inOrder(n.right))


Post Order Traversal,postOrder(Node n)
 if(n != null)
 print(inOrder(n.left))
 print(inOrder(n.right))
 print(n)


Pre Order Traversal,preOrder(Node n)
 if(n != null)
 print(n)
 print(inOrder(n.left))
 print(inOrder(n.right))


Determining Binary Search Tree,do an inOrder traversal, everything to the left must be less than anything to the right


Stacks,FIFO
push
pop
peek

implemented as an array or a linkedlist


Queues,


Heaps,A specialized kind of tree where the children of a parent node respect some sort of ordering(ie the parent of its children is greater than its children - max heap)


Graphs,Data structure with nodes and edges,

implement edges
- reference to both nodes
- weight of edge/label

implement nodes
- list of edges that surround it (or list of nodes that neighbor it)
- has label

implement graph
- graph has hashmap of all of its vertices and all of its edges


DFS - Graph,1 procedure DFS(G,v):
2 label v as discovered
3 for all edges from v to w in G.adjacentEdges(v) do
4 if vertex w is not labeled as discovered then
5 recursively call DFS(G,w)

or use a stack to keep track of what you have visited


BFS - Graph,Breadth-First-Search(Graph, root):

 for each node n in Graph:
 n.distance = INFINITY
 n.parent = NIL

 create empty queue Q

 root.distance = 0
 Q.enqueue(root)

 while Q is not empty:
 current = Q.dequeue()
 for each node n that is adjacent to current:
 if n.distance == INFINITY:
 n.distance = current.distance + 1
 n.parent = current
 Q.enqueue(n)

queue which ones to go to next based on distance from parent


Shortest Path/Dijkstra,


dfs vs. bfs,


Big O Notation for Sorting,


Object Oriented Programming,


Inheritance,


Interface,Shell of class, includes method names and final variables, however definitions of these aren't included. Anything that inherits from the interface will use the "implements" keyword and every function MUST be defined anything that inherits the interface

All functions put in an interface will default as public methods

"what an object CAN DO"


Abstract Class,A defined version of an object, all subclasses of an abstract class will "extend" the original class, methods do not have to use the methods from the parent class and can overwrite, or call the super class method, you cannot create an object with the abstract class

When an abstract class is subclassed, the subclass usually provides implementations for all of the abstract methods in its parent class. However, if it does not, then the subclass must also be declared abstract.

"what an object IS"


MongoDB vs. SQL,SQL is a relational database, based on set theory/relation theory, the guidelines are more rigid, more expensive to use, better to enforce data integrity, difficult to scale (not easy to move across mutliple serves)

NoSQL, like mongoDB is non relational, the data is much more flexible (think JSON format) very easy to add "documents" that are not necessarily all like (good to scale)


Cache,Temporary storage that reduces access time to part of memory


Race Condition,When two processes are sharing (reading/writing) the same piece of data and the end results depends on which process is read/writing at the particular moment.

Different possible outputs depending on which line of code is executed when


Page,A logical division of a program into chunks of memory


Process vs. Thread,Process - a running program

Thread - a mini process


User Space vs. Kernel Space,User Space: set of locations where a process of a user runs, has limited access to memory, only accesses the kernel space if it sends an interrupt/exception

Kernel Space: Where the kernel is stored, has access to all parts of memory


Interupt,Signal emitted by the hardware that stops a process so that some other action can be taken


Cache,


Divide and Conquer Algorithm,


Supervised vs. Unsupervised Machine Learning,Supervised: given x,y data points and asked to predict more y

Unsupervised: given x data points in an attempt to classify y


Machine Learning vs. Artificial Intelligence,Artificial Intelligence: ability for machines to think, learn and reason like humans do

Machine Learning: ability to learn using algorithms to classify and learn from data


Comparable Class,


Stable Sort,if two elements of the same value need to be sorted, their positioning remains the same


Selection Sort,Finds the lowest element in the array and swaps it with the first position, after first pass the first element in the array will be sorted


Selection Sort run time,O(n^2)


Tail Recursion,Recursion where the last return in the stack is already the answer, does not need to return every recursive call


Given a random number generator that produces the number 1-6 and a random number generator that produce the number 1-4, how would you create a random number generator that produces 1-7,add them, mod it by 7, then add 1


Polymorphism,Ability for an object to take on many forms. Any Java object that can pass more than one IS-A test is considered to be polymorphic.
